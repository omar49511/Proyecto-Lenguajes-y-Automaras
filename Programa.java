/* Generated By:JavaCC: Do not edit this line. Programa.java */
import java.util.logging.*;
import java.io.*;
public class Programa implements ProgramaConstants {
  /*public static void main( String args []) throws ParseException{
    try
    {
      Programa analizador = new Programa( System.in );
      analizador.Iniciar();
      System.out.println("La cadena fue aceptada correctamente");
    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("Hubo un error y la cadena no fue acepatada");
    }
  }*/

    public static void main(String[] args) {
                try {
            Programa analizador = new Programa(new BufferedReader(new FileReader("./expresiones.txt")));
            analizador.Iniciar();
        } catch (ParseException e) {
            System.err.println(e.getMessage());
        }
        catch (FileNotFoundException e) {
            System.err.println(e.getMessage());
        }
         catch(TokenMgrError e){
            System.err.println(e.getMessage());
        }
    }

  static final public void Iniciar() throws ParseException {
    label_1:
    while (true) {
      Instruccion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPRESION:
      case OPERADORRELACIONAL:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case CERRARARCHIVO:
      case RENOMBRARARCHIVO:
      case REMOVERARCHIVO:
      case ARCHIVOTEMPORAL:
      case LEERARCHIVO:
      case IMPRIMIRARCHIVO:
      case LIMPIARBUFFER:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case LONGITUDCADENA:
      case MENORENTERO:
      case FUNCIONBESSEL:
      case LOGARITMO:
      case RAIZ:
      case POTENCIA:
      case EXPONENCIAL:
      case FUNCIONESTRIGONOMETRICAS:
      case FUNCIONESTRIGONOMETRICASINV:
      case TRUNCARVALOR:
      case REDONDEONUMERO:
      case NUMEROALEATORIO:
      case VALORABSOLUTO:
      case ASIGNARMEMORIA:
      case LIBERARMEMORIA:
      case PARENTESISAPERTURA:
      case PARENTESISCERRADURA:
      case LLAVEAPERTURA:
      case LLAVECERRADURA:
      case CORCHETEAPERTURA:
      case CORCHETECERRADURA:
      case PUNTO:
      case COMA:
      case SEMICOLON:
      case DORMIR:
      case RETRASAR:
      case DIRECTORIO:
      case LLAMAR:
      case MODULO:
      case NUEVOTIPO:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case TUPLA:
      case PULSOSDERELOJ:
      case OPERACIONESSTRINGNUMERO:
      case ORDENAR:
      case RANGO:
      case OPERACIONESBIT:
      case AYUDA:
      case QUICKSORT:
      case COLA:
      case INICIOCRONOMETRO:
      case FINCRONOMETRO:
      case OBTENER:
      case ASIGNAR:
      case SOCKET:
      case SERVIDORSOCKET:
      case ENTRADADATOS:
      case SALIDADATOSCLIENTE:
      case SALIDADATOS:
      case REMPLAZAR:
      case CONVERTIR:
      case LONGITUD:
      case PILA:
      case METERDATOPILA:
      case SACARDATOPILA:
      case CLONARPILA:
      case MCD:
      case MCM:
      case ANALIZAGRAMATICA:
      case PAR:
      case PERTENECE:
      case TODOS:
      case ALGUNO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void Instruccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAPTURARDATO:
      jj_consume_token(CAPTURARDATO);
      break;
    case OPERACIONESCARACTER:
      jj_consume_token(OPERACIONESCARACTER);
      break;
    case ABRIRARCHIVO:
      jj_consume_token(ABRIRARCHIVO);
      break;
    case CERRARARCHIVO:
      jj_consume_token(CERRARARCHIVO);
      break;
    case RENOMBRARARCHIVO:
      jj_consume_token(RENOMBRARARCHIVO);
      break;
    case REMOVERARCHIVO:
      jj_consume_token(REMOVERARCHIVO);
      break;
    case ARCHIVOTEMPORAL:
      jj_consume_token(ARCHIVOTEMPORAL);
      break;
    case LEERARCHIVO:
      jj_consume_token(LEERARCHIVO);
      break;
    case IMPRIMIRARCHIVO:
      jj_consume_token(IMPRIMIRARCHIVO);
      break;
    case LIMPIARBUFFER:
      jj_consume_token(LIMPIARBUFFER);
      break;
    case COPIARCADENA:
      jj_consume_token(COPIARCADENA);
      break;
    case COMPARARCADENA:
      jj_consume_token(COMPARARCADENA);
      break;
    case ENCONTRARCADENA:
      jj_consume_token(ENCONTRARCADENA);
      break;
    case CONCATENARCADENA:
      jj_consume_token(CONCATENARCADENA);
      break;
    case LONGITUDCADENA:
      jj_consume_token(LONGITUDCADENA);
      break;
    case MENORENTERO:
      jj_consume_token(MENORENTERO);
      break;
    case FUNCIONBESSEL:
      jj_consume_token(FUNCIONBESSEL);
      break;
    case LOGARITMO:
      jj_consume_token(LOGARITMO);
      break;
    case RAIZ:
      jj_consume_token(RAIZ);
      break;
    case POTENCIA:
      jj_consume_token(POTENCIA);
      break;
    case EXPONENCIAL:
      jj_consume_token(EXPONENCIAL);
      break;
    case FUNCIONESTRIGONOMETRICAS:
      jj_consume_token(FUNCIONESTRIGONOMETRICAS);
      break;
    case FUNCIONESTRIGONOMETRICASINV:
      jj_consume_token(FUNCIONESTRIGONOMETRICASINV);
      break;
    case TRUNCARVALOR:
      jj_consume_token(TRUNCARVALOR);
      break;
    case REDONDEONUMERO:
      jj_consume_token(REDONDEONUMERO);
      break;
    case NUMEROALEATORIO:
      jj_consume_token(NUMEROALEATORIO);
      break;
    case VALORABSOLUTO:
      jj_consume_token(VALORABSOLUTO);
      break;
    case ASIGNARMEMORIA:
      jj_consume_token(ASIGNARMEMORIA);
      break;
    case LIBERARMEMORIA:
      jj_consume_token(LIBERARMEMORIA);
      break;
    case PARENTESISAPERTURA:
      jj_consume_token(PARENTESISAPERTURA);
      break;
    case PARENTESISCERRADURA:
      jj_consume_token(PARENTESISCERRADURA);
      break;
    case LLAVEAPERTURA:
      jj_consume_token(LLAVEAPERTURA);
      break;
    case LLAVECERRADURA:
      jj_consume_token(LLAVECERRADURA);
      break;
    case CORCHETEAPERTURA:
      jj_consume_token(CORCHETEAPERTURA);
      break;
    case CORCHETECERRADURA:
      jj_consume_token(CORCHETECERRADURA);
      break;
    case PUNTO:
      jj_consume_token(PUNTO);
      break;
    case COMA:
      jj_consume_token(COMA);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case DORMIR:
      jj_consume_token(DORMIR);
      break;
    case RETRASAR:
      jj_consume_token(RETRASAR);
      break;
    case DIRECTORIO:
      jj_consume_token(DIRECTORIO);
      break;
    case LLAMAR:
      jj_consume_token(LLAMAR);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    case NUEVOTIPO:
      jj_consume_token(NUEVOTIPO);
      break;
    case LISTA:
      jj_consume_token(LISTA);
      break;
    case PRIMEROLISTA:
      jj_consume_token(PRIMEROLISTA);
      break;
    case ULTIMOLISTA:
      jj_consume_token(ULTIMOLISTA);
      break;
    case TUPLA:
      jj_consume_token(TUPLA);
      break;
    case PULSOSDERELOJ:
      jj_consume_token(PULSOSDERELOJ);
      break;
    case OPERACIONESSTRINGNUMERO:
      jj_consume_token(OPERACIONESSTRINGNUMERO);
      break;
    case ORDENAR:
      jj_consume_token(ORDENAR);
      break;
    case RANGO:
      jj_consume_token(RANGO);
      break;
    case OPERACIONESBIT:
      jj_consume_token(OPERACIONESBIT);
      break;
    case AYUDA:
      jj_consume_token(AYUDA);
      break;
    case QUICKSORT:
      jj_consume_token(QUICKSORT);
      break;
    case COLA:
      jj_consume_token(COLA);
      break;
    case INICIOCRONOMETRO:
      jj_consume_token(INICIOCRONOMETRO);
      break;
    case FINCRONOMETRO:
      jj_consume_token(FINCRONOMETRO);
      break;
    case OBTENER:
      jj_consume_token(OBTENER);
      break;
    case ASIGNAR:
      jj_consume_token(ASIGNAR);
      break;
    case SOCKET:
      jj_consume_token(SOCKET);
      break;
    case SERVIDORSOCKET:
      jj_consume_token(SERVIDORSOCKET);
      break;
    case ENTRADADATOS:
      jj_consume_token(ENTRADADATOS);
      break;
    case SALIDADATOSCLIENTE:
      jj_consume_token(SALIDADATOSCLIENTE);
      break;
    case SALIDADATOS:
      jj_consume_token(SALIDADATOS);
      break;
    case REMPLAZAR:
      jj_consume_token(REMPLAZAR);
      break;
    case CONVERTIR:
      jj_consume_token(CONVERTIR);
      break;
    case LONGITUD:
      jj_consume_token(LONGITUD);
      break;
    case PILA:
      jj_consume_token(PILA);
      break;
    case METERDATOPILA:
      jj_consume_token(METERDATOPILA);
      break;
    case SACARDATOPILA:
      jj_consume_token(SACARDATOPILA);
      break;
    case CLONARPILA:
      jj_consume_token(CLONARPILA);
      break;
    case MCD:
      jj_consume_token(MCD);
      break;
    case MCM:
      jj_consume_token(MCM);
      break;
    case ANALIZAGRAMATICA:
      jj_consume_token(ANALIZAGRAMATICA);
      break;
    case PAR:
      jj_consume_token(PAR);
      break;
    case PERTENECE:
      jj_consume_token(PERTENECE);
      break;
    case TODOS:
      jj_consume_token(TODOS);
      break;
    case OPERADORRELACIONAL:
      jj_consume_token(OPERADORRELACIONAL);
      break;
    case IMPRESION:
      jj_consume_token(IMPRESION);
      break;
    case ALGUNO:
      jj_consume_token(ALGUNO);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProgramaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffc0,0xffffffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x7fffff,0x7fffff,};
   }

  /** Constructor with InputStream. */
  public Programa(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Programa(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProgramaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Programa(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProgramaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Programa(ProgramaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProgramaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
