/* Generated By:JavaCC: Do not edit this line. ProgramaTokenManager.java */
import java.util.logging.*;
import java.io.*;

/** Token Manager. */
public class ProgramaTokenManager implements ProgramaConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000080004000L) != 0L || (active1 & 0x3L) != 0L)
            return 211;
         if ((active0 & 0x800000200003000L) != 0L || (active1 & 0x200L) != 0L)
            return 234;
         if ((active0 & 0x4004000047c0000L) != 0L || (active1 & 0x1008L) != 0L)
            return 99;
         if ((active0 & 0x8000000000000L) != 0L)
            return 17;
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x6000L) != 0L)
            return 58;
         if ((active1 & 0x600000L) != 0L)
            return 190;
         if ((active1 & 0x20800L) != 0L)
            return 242;
         if ((active0 & 0x102000000800000L) != 0L || (active1 & 0x8000L) != 0L)
            return 125;
         if ((active0 & 0x2000000000000000L) != 0L)
            return 27;
         if ((active0 & 0x1000038c00L) != 0L)
            return 225;
         if ((active1 & 0x10004L) != 0L)
            return 36;
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x180000L) != 0L)
            return 5;
         if ((active0 & 0x4000000000000L) != 0L)
            return 23;
         return -1;
      case 1:
         if ((active0 & 0x2000000000000L) != 0L)
            return 135;
         if ((active0 & 0x3000L) != 0L || (active1 & 0x200L) != 0L)
            return 238;
         if ((active0 & 0x8000000000000L) != 0L)
            return 16;
         if ((active0 & 0x800000L) != 0L)
            return 131;
         if ((active0 & 0x2000000000000000L) != 0L)
            return 26;
         if ((active1 & 0x2L) != 0L)
            return 210;
         if ((active1 & 0x4L) != 0L)
            return 35;
         if ((active1 & 0x2000L) != 0L)
            return 71;
         if ((active0 & 0x7c0000L) != 0L || (active1 & 0x1000L) != 0L)
            return 105;
         return -1;
      case 2:
         if ((active0 & 0x800000L) != 0L)
            return 130;
         if ((active0 & 0x2000000000000L) != 0L)
            return 134;
         if ((active1 & 0x4L) != 0L)
            return 34;
         if ((active0 & 0x7c0000L) != 0L)
            return 104;
         return -1;
      case 3:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 133;
         return -1;
      case 4:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 37);
      case 41:
         return jjStopAtPos(0, 38);
      case 44:
         return jjStopAtPos(0, 44);
      case 46:
         return jjStopAtPos(0, 43);
      case 59:
         return jjStopAtPos(0, 45);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30L);
      case 91:
         return jjStopAtPos(0, 41);
      case 93:
         return jjStopAtPos(0, 42);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x102000000800000L, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x180000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000038c00L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10004L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20800L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x6000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000200003000L, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4004000047c0000L, 0x1008L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000080004000L, 0x3L);
      case 123:
         return jjStopAtPos(0, 39);
      case 125:
         return jjStopAtPos(0, 40);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x802000200000000L, active1, 0x40100L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0x30000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008800000803000L, active1, 0xa2cL);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000000000000L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100400000000000L, active1, 0x308000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400040L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x404000008000400L, active1, 0x4412L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000008000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c0000L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8080000000000000L, active1, 0x2080L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 99:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(2, 65);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x10L);
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000401000000000L, active1, 0x180000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 108:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         return jjMoveStringLiteralDfa3_0(active0, 0x2002800000020800L, active1, 0L);
      case 109:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000200001000L, active1, 0xc00L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4100000000000000L, active1, 0x8000L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 28);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(2, 78);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000004400L, active1, 0x240L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000047d0000L, active1, 0x40020L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x2000L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 34);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x180L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000009000L, active1, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000002c0000L, active1, 0x1000L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 33);
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000400L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x104000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x800L);
      case 104:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(3, 77);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000c00000L, active1, 0x200L);
      case 109:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(3, 84);
         break;
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(3, 83);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800L, active1, 0L);
      case 112:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 52);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 58);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004000000020000L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x420L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0x200L);
      case 99:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 31);
         break;
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 55);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(4, 59);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(4, 63);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(4, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(4, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x430L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x904000L, active1, 0L);
      case 107:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(4, 56);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(4, 76);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x81000L, active1, 0L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x18000L, active1, 0L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x20800L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(4, 62);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x840L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         break;
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(5, 15);
         break;
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(5, 75);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x900000L, active1, 0L);
      case 112:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x420L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(5, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 121:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xa0L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(6, 20);
         break;
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 51);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(6, 73);
         break;
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         break;
      case 103:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(6, 23);
         break;
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(6, 74);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x140L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active1, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x80L);
      case 107:
         return jjMoveStringLiteralDfa10_0(active1, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa11_0(active1, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x20L);
      case 109:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(10, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 109:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(11, 71);
         break;
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(11, 69);
         return jjMoveStringLiteralDfa12_0(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 109:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(15, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 252;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(7);
                  else if (curChar == 61)
                     jjCheckNAdd(7);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 62)
                     jjCheckNAddTwoStates(7, 140);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(7, 138);
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 7:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if (curChar == 61)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if (curChar == 33)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if ((0x5000000000000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 137:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(7, 138);
                  break;
               case 138:
                  if (curChar == 60 && kind > 60)
                     kind = 60;
                  break;
               case 139:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(7, 140);
                  break;
               case 140:
                  if (curChar == 62 && kind > 60)
                     kind = 60;
                  break;
               case 243:
                  if (curChar == 48 && kind > 25)
                     kind = 25;
                  break;
               case 244:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 225:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 228;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 105:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 120;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 114;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 109;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 58:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 82;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 68;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 77;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 210:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 214;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 219;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 215;
                  if (curChar == 97)
                     jjCheckNAdd(100);
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 99:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if (curChar == 105)
                     jjCheckNAdd(100);
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 98;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 115;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 35:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 38;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 234:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 238;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 104:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 119;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 71:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 125:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 135;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 131;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 128;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 126;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 190:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 204;
                  else if (curChar == 98)
                     jjCheckNAdd(199);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 195;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 192;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 201;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 197;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 34:
                  if (curChar == 115)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 37;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 2:
                  if (curChar == 108)
                     jjAddStates(0, 3);
                  else if (curChar == 114)
                     jjAddStates(4, 5);
                  else if (curChar == 102)
                     jjAddStates(6, 7);
                  else if (curChar == 116)
                     jjAddStates(8, 11);
                  else if (curChar == 97)
                     jjAddStates(12, 18);
                  else if (curChar == 105)
                     jjAddStates(19, 26);
                  else if (curChar == 99)
                     jjAddStates(27, 31);
                  else if (curChar == 115)
                     jjAddStates(32, 37);
                  else if (curChar == 87)
                     jjAddStates(38, 39);
                  else if (curChar == 112)
                     jjAddStates(40, 45);
                  else if (curChar == 82)
                     jjAddStates(46, 47);
                  else if (curChar == 103)
                     jjAddStates(48, 50);
                  else if (curChar == 126)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 242:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 250;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 245;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 247;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 111 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 11:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 12:
               case 45:
                  if (curChar == 110)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 99 && kind > 35)
                     kind = 35;
                  break;
               case 20:
               case 133:
               case 235:
                  if (curChar == 111)
                     jjCheckNAdd(19);
                  break;
               case 21:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 100 && kind > 53)
                     kind = 53;
                  break;
               case 26:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 126 && kind > 60)
                     kind = 60;
                  break;
               case 30:
                  if (curChar == 103)
                     jjAddStates(48, 50);
                  break;
               case 31:
                  if (curChar == 114 && kind > 8)
                     kind = 8;
                  break;
               case 32:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (curChar == 104 && kind > 8)
                     kind = 8;
                  break;
               case 38:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 115 && kind > 8)
                     kind = 8;
                  break;
               case 42:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 82)
                     jjAddStates(46, 47);
                  break;
               case 46:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 100 && kind > 8)
                     kind = 8;
                  break;
               case 52:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 112)
                     jjAddStates(40, 45);
                  break;
               case 55:
                  if (curChar == 116 && kind > 6)
                     kind = 6;
                  break;
               case 56:
                  if (curChar == 110)
                     jjCheckNAdd(55);
                  break;
               case 57:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 59:
                  if (curChar == 110 && kind > 6)
                     kind = 6;
                  break;
               case 60:
                  if (curChar == 108)
                     jjCheckNAdd(59);
                  break;
               case 61:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 102 && kind > 6)
                     kind = 6;
                  break;
               case 66:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 115 && kind > 6)
                     kind = 6;
                  break;
               case 72:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 76)
                     jjCheckNAdd(59);
                  break;
               case 74:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 114 && kind > 6)
                     kind = 6;
                  break;
               case 80:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 87)
                     jjAddStates(38, 39);
                  break;
               case 85:
                  if (curChar == 101 && kind > 6)
                     kind = 6;
                  break;
               case 86:
                  if (curChar == 110)
                     jjCheckNAdd(85);
                  break;
               case 87:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjCheckNAdd(85);
                  break;
               case 94:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 115)
                     jjAddStates(32, 37);
                  break;
               case 97:
                  if (curChar == 119 && kind > 6)
                     kind = 6;
                  break;
               case 98:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 100:
                  if (curChar == 110 && kind > 29)
                     kind = 29;
                  break;
               case 101:
                  if (curChar == 105)
                     jjCheckNAdd(100);
                  break;
               case 102:
                  if (curChar == 100 && kind > 57)
                     kind = 57;
                  break;
               case 103:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 106:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 108 && kind > 57)
                     kind = 57;
                  break;
               case 108:
               case 201:
                  if (curChar == 111)
                     jjCheckNAdd(107);
                  break;
               case 109:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
               case 117:
                  if (curChar == 108)
                     jjCheckNAdd(107);
                  break;
               case 113:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 118:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 99)
                     jjAddStates(27, 31);
                  break;
               case 124:
                  if (curChar == 117)
                     jjCheckNAdd(55);
                  break;
               case 126:
                  if (curChar == 110 && kind > 8)
                     kind = 8;
                  break;
               case 127:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 115 && kind > 29)
                     kind = 29;
                  break;
               case 129:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 108 && kind > 32)
                     kind = 32;
                  break;
               case 131:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 134:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 141:
                  if (curChar == 105)
                     jjAddStates(19, 26);
                  break;
               case 142:
                  if (curChar == 116 && kind > 8)
                     kind = 8;
                  break;
               case 143:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 109 && kind > 9)
                     kind = 9;
                  break;
               case 147:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 97 && kind > 9)
                     kind = 9;
                  break;
               case 153:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 114 && kind > 9)
                     kind = 9;
                  break;
               case 159:
               case 164:
               case 207:
               case 212:
                  if (curChar == 101)
                     jjCheckNAdd(158);
                  break;
               case 160:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 165:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 116 && kind > 9)
                     kind = 9;
                  break;
               case 170:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 101 && kind > 9)
                     kind = 9;
                  break;
               case 176:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 107 && kind > 9)
                     kind = 9;
                  break;
               case 182:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 97)
                     jjAddStates(12, 18);
                  break;
               case 188:
                  if (curChar == 105 && kind > 9)
                     kind = 9;
                  break;
               case 189:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 191:
                  if (curChar == 115 && kind > 30)
                     kind = 30;
                  break;
               case 192:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 110 && kind > 30)
                     kind = 30;
                  break;
               case 195:
                  if (curChar == 105)
                     jjCheckNAdd(194);
                  break;
               case 196:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 97)
                     jjCheckNAdd(194);
                  break;
               case 198:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 115 && kind > 34)
                     kind = 34;
                  break;
               case 200:
               case 247:
                  if (curChar == 98)
                     jjCheckNAdd(199);
                  break;
               case 202:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 102 && kind > 57)
                     kind = 57;
                  break;
               case 204:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 116)
                     jjAddStates(8, 11);
                  break;
               case 208:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 213:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 97)
                     jjCheckNAdd(100);
                  break;
               case 218:
                  if (curChar == 108 && kind > 54)
                     kind = 54;
                  break;
               case 219:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 102)
                     jjAddStates(6, 7);
                  break;
               case 222:
                  if (curChar == 114 && kind > 32)
                     kind = 32;
                  break;
               case 223:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 226:
                  if (curChar == 116 && kind > 53)
                     kind = 53;
                  break;
               case 227:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if (curChar == 114)
                     jjAddStates(4, 5);
                  break;
               case 231:
                  if (curChar == 100 && kind > 32)
                     kind = 32;
                  break;
               case 232:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 236:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 108)
                     jjAddStates(0, 3);
                  break;
               case 241:
                  if (curChar == 103 && kind > 25)
                     kind = 25;
                  break;
               case 245:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 116 && kind > 54)
                     kind = 54;
                  break;
               case 250:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 252 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   242, 246, 248, 251, 234, 239, 225, 229, 211, 216, 217, 220, 190, 193, 196, 198, 
   200, 202, 205, 145, 151, 157, 163, 168, 174, 180, 186, 125, 127, 129, 132, 136, 
   99, 101, 106, 111, 116, 122, 92, 95, 58, 64, 69, 72, 78, 83, 50, 53, 
   36, 40, 43, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\146\157\160\145\156", "\146\143\154\157\163\145", "\162\145\156\141\155\145", 
"\162\145\155\157\166\145", "\164\155\160\146\151\154\145", "\146\163\143\141\156\146", 
"\146\160\162\151\156\164\146", "\146\146\154\165\163\150", "\163\164\162\143\160\171", 
"\163\164\162\143\155\160", "\163\164\162\146\151\156\144", "\163\164\162\143\141\164", 
"\163\164\162\154\145\156", "\143\145\151\154\151\156\147", "\152\156", null, "\163\161\162\164", 
"\160\157\167", "\145\170\160", null, null, "\164\162\165\156\143", null, "\162\141\156\144", 
null, null, "\146\162\145\145", "\50", "\51", "\173", "\175", "\133", "\135", "\56", 
"\54", "\73", "\163\154\145\145\160", "\144\145\154\141\171", "\144\151\162", 
"\143\141\154\154", "\155\157\144\165\154\145", "\156\145\167\124\171\160\145", 
"\114\151\163\164", null, null, "\164\165\160\154\145", "\143\154\157\143\153", null, 
"\163\157\162\164", "\162\141\156\147\145", null, "\150\145\154\160", "\161\163\157\162\164", 
"\161\165\145\165\145", "\164\151\143", "\164\157\143", "\147\145\164", "\163\145\164", 
"\123\157\143\153\145\164", "\123\145\162\166\145\162\123\157\143\153\145\164", 
"\111\156\160\165\164\123\164\162\145\141\155", "\117\165\164\160\165\164\123\164\162\145\141\155", 
"\104\141\164\141\117\165\164\160\165\164\123\164\162\145\141\155", "\162\145\160\154\141\143\145", "\103\157\156\166\145\162\164", 
"\154\145\156\147\164\150", "\163\164\141\143\153", "\160\165\163\150", "\160\157\160", 
"\143\154\157\156\145", "\147\143\144", "\154\143\155", "\120\141\162\163\145", "\145\166\145\156", 
"\145\154\145\155", "\141\154\154", "\141\156\171", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[252];
static private final int[] jjstateSet = new int[504];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ProgramaTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ProgramaTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 252; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                   System.out.print("Impresion:  "+image+"\n");
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                         System.out.print("Operador relacional:  "+image+"\n");
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                           System.out.print("Captura de dato:  "+image+"\n");
         break;
      case 9 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                               System.out.print("Operacion con caracter:  "+image+"\n");
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                               System.out.print("Abrir archivo:  "+image+"\n");
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                                  System.out.print("Cerrar archivo:  "+image+"\n");
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                                     System.out.print("Renombrar archivo:  "+image+"\n");
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                                   System.out.print("Remover archivo:  "+image+"\n");
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                                     System.out.print("Archivo temporal:  "+image+"\n");
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                                System.out.print("Leer archivo:  "+image+"\n");
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                                     System.out.print("Imprimir archivo:  "+image+"\n");
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                                 System.out.print("Limipar buffer:  "+image+"\n");
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                                System.out.print("Copiar cadena:  "+image+"\n");
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                                   System.out.print("Comparar cadnea:  "+image+"\n");
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                                     System.out.print("Encontra cadena:  "+image+"\n");
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                                     System.out.print("Concatenar cadena:  "+image+"\n");
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                                   System.out.print("Longitus cadena:  "+image+"\n");
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                                System.out.print("Menor entero:  "+image+"\n");
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                              System.out.print("Funcion Bessel:  "+image+"\n");
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   System.out.print("Logaritmo:  "+image+"\n");
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                       System.out.print("Raiz:  "+image+"\n");
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                          System.out.print("Potencia:  "+image+"\n");
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                             System.out.print("Exponencial:  "+image+"\n");
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      System.out.print("Funcion trigonometrica:  "+image+"\n");
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            System.out.print("Funcion trigonometrica inversa:  "+image+"\n");
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                System.out.print("Truncar valor:  "+image+"\n");
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                 System.out.print("Redondedo numero:  "+image+"\n");
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                                  System.out.print("Numero aleatorio:  "+image+"\n");
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.out.print("Valor ansoluto:  "+image+"\n");
         break;
      case 35 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     System.out.print("Asignar memoria:  "+image+"\n");
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                                 System.out.print("Liberar memoria:  "+image+"\n");
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                                 System.out.print("Parentesis apertura:  "+image+"\n");
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                                   System.out.print("Parentesis cerradura:  "+image+"\n");
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                             System.out.print("Llave apertura:  "+image+"\n");
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                              System.out.print("Llave cerradura:  "+image+"\n");
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                                System.out.print("Corchete apertura:  "+image+"\n");
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                                 System.out.print("Corchete cerradura:  "+image+"\n");
         break;
      case 43 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                     System.out.print("Punto:  "+image+"\n");
         break;
      case 44 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                    System.out.print("Coma:  "+image+"\n");
         break;
      case 45 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                         System.out.print("Semicolon:  "+image+"\n");
         break;
      case 46 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                         System.out.print("Dormir:  "+image+"\n");
         break;
      case 47 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                           System.out.print("Retrasar:  "+image+"\n");
         break;
      case 48 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                           System.out.print("Directorio:  "+image+"\n");
         break;
      case 49 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                        System.out.print("Llamar:  "+image+"\n");
         break;
      case 50 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                          System.out.print("Modulo:  "+image+"\n");
         break;
      case 51 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                              System.out.print("Nuevo tipo:  "+image+"\n");
         break;
      case 52 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                       System.out.print("Lista:  "+image+"\n");
         break;
      case 53 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       System.out.print("Primero lista:  "+image+"\n");
         break;
      case 54 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.print("Ultimo lista:  "+image+"\n");
         break;
      case 55 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                        System.out.print("Tupla:  "+image+"\n");
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                                System.out.print("Pulsos de reloj:  "+image+"\n");
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                       System.out.print("Operacion strin-numero:  "+image+"\n");
         break;
      case 58 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                         System.out.print("Ordenar:  "+image+"\n");
         break;
      case 59 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                        System.out.print("Rango:  "+image+"\n");
         break;
      case 60 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       System.out.print("Operacion bit:  "+image+"\n");
         break;
      case 61 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                       System.out.print("Ayuda:  "+image+"\n");
         break;
      case 62 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                            System.out.print("Quicksort:  "+image+"\n");
         break;
      case 63 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                       System.out.print("Cola:  "+image+"\n");
         break;
      case 64 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                                 System.out.print("Inicio Cronometro:  "+image+"\n");
         break;
      case 65 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                               System.out.print("Fin Cronometro:  "+image+"\n");
         break;
      case 66 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                        System.out.print("Obtener:  "+image+"\n");
         break;
      case 67 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                         System.out.print("Asignar:  "+image+"\n");
         break;
      case 68 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                          System.out.print("Socket:  "+image+"\n");
         break;
      case 69 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                                         System.out.print("Servidor Socket:  "+image+"\n");
         break;
      case 70 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                                     System.out.print("Entrada datos:  "+image+"\n");
         break;
      case 71 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                                            System.out.print("Salida datos cliente:  "+image+"\n");
         break;
      case 72 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                                         System.out.print("Salida datos:  "+image+"\n");
         break;
      case 73 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                              System.out.print("Remplazar:  "+image+"\n");
         break;
      case 74 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                              System.out.print("Convertir:  "+image+"\n");
         break;
      case 75 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                            System.out.print("Longitud:  "+image+"\n");
         break;
      case 76 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                       System.out.print("Pila:  "+image+"\n");
         break;
      case 77 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                                System.out.print("Meter pila:  "+image+"\n");
         break;
      case 78 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                               System.out.print("Sacar pila:  "+image+"\n");
         break;
      case 79 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                              System.out.print("Clonar pila:  "+image+"\n");
         break;
      case 80 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                    System.out.print("MCD:  "+image+"\n");
         break;
      case 81 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                    System.out.print("MCM:  "+image+"\n");
         break;
      case 82 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                                   System.out.print("Analiza gramatica:  "+image+"\n");
         break;
      case 83 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                     System.out.print("Par:  "+image+"\n");
         break;
      case 84 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                           System.out.print("Pertenece:  "+image+"\n");
         break;
      case 85 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                      System.out.print("Todos:  "+image+"\n");
         break;
      case 86 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                       System.out.print("Alguno:  "+image+"\n");
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
