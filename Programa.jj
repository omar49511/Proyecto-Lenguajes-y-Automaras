PARSER_BEGIN(Programa)
public class Programa
{
  public static void main( String args []) throws ParseException{
    try
    {
      Programa analizador = new Programa( System.in );
      analizador.Iniciar();
      System.out.println("La cadena fue aceptada correctamente");
    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("Hubo un error y la cadena no fue acepatada");
    }
  }
}
PARSER_END(Programa)

TOKEN : /* Booleano */
{
<BOOLEANO: "true" | "false">{System.out.println("BOOLEANO -> "+ image);} //1
}
TOKEN: /* Ciclos */
{
<CICLO: "do"| "for" | "while" | "loop">{System.out.println("CICLO -> "+ image);} //2
}
TOKEN:
{
<CONDICION: ("if")+>{System.out.println("CONDICION");} //3
}
TOKEN:
{
<SINO: ("else")+>{System.out.println("SINO");} //3
}
TOKEN:
{
<CASO: ("case")+>{System.out.println("CASO");} //4
}
TOKEN:
{
<CONSTANTE: "const">{System.out.println("CONSTANTE");} //5
}
TOKEN:
{
<CLASE: "class">{System.out.println("CLASE");} //6
}
TOKEN:
{
<LIMPIARCONSOLA: "clear">{System.out.println("LIMPIARCONSOLA");} //7
}
TOKEN:
{
<DETENER: "break">{System.out.println("DETENER");} //8
}
TOKEN:
{
<ESTATICO: "static">{System.out.println("ESTATICO");} //9
}
TOKEN:
{
<FLUJOCONTROL: "switch">{System.out.println("FLUJOCONTROL");} //10
}
TOKEN:
{
<MANEJOEXEPCIONES: "try"| "catch" | "throw" | "Raise">{System.out.println("MANEJOEXEPCIONES -> "+ image);} //11
}
TOKEN:
{
<OPTIMIZACION: "volatile">{System.out.println("OPTIMIZACION");} //12
}
TOKEN:
{
<PORDEFECTO: "default">{System.out.println("PORDEFECTO");} //13
}
TOKEN:
{
<REGRESAR: "return" | "yield">{System.out.println("REGRESAR -> "+ image);} //14
}
TOKEN: /*TIPOS*/
{
<TIPOACCESO: "global" | "private" | "protected" | "public" | "transient" | "internal" | "abstract">{System.out.println("TIPOACCESO -> "+ image);} //15
|<TIPODATO: "boolean" | "byte" | "char" | "double" | "float" | "int" | "varchar" | "decimal" | "tinyint"| "String" | "ushort" | "sbyte">{System.out.println("TIPODATO -> "+ image);} //16
|<TIPOMETODO: "void">{System.out.println("TIPOMETODO");} //17
}
TOKEN:
{
<ENUMERAR: "enum">{System.out.println("ENUMERAR");} //18
}
TOKEN:
{
<SIZE: "sizeof">{System.out.println("SIZE");} //19
}
TOKEN:
{
<ESTRUCTURA: "struct">{System.out.println("ESTRUCTURA");} //20
}
TOKEN:
{
<UNION: "union">{System.out.println("UNION");} //21
}
TOKEN:
{
<DESDE: "from">{System.out.println("DESDE");} //22
}
TOKEN:
{
<CONTINUAR: "continue">{System.out.println("CONTINUAR");} //23
}
TOKEN:
{
<IRA: "goto" | "jump">{System.out.println("IRA -> "+ image);} //24
}
TOKEN:
{
<PAQUETE: "package">{System.out.println("PAQUETE");} //25
}
TOKEN:
{
<OTROLENGUAJE: "native">{System.out.println("OTROLENGUAJE");} //26
}
TOKEN:
{
<EXPORTAR: "export">{System.out.println("EXPORTAR");} //27
}
TOKEN:
{
<COMPROBARVALOREN: "in">{System.out.println("COMPROBARVALOREN");} //28
}
TOKEN:
{
<ES: "is">{System.out.println("ES");} //29
}
TOKEN:
{
<BORRAR: "del" | "drop">{System.out.println("BORRAR -> "+ image);} //30
}
TOKEN:
{
<NOOPERACION: "nop">{System.out.println("NOOPERACION");} //31
}
TOKEN:
{
<DEFINIR: "#define">{System.out.println("DEFINIR");} //32
}
TOKEN:
{
<INCLUIR: "#include">{System.out.println("INCLUIR");} //33
}
TOKEN:
{
<SINCRONIZAR: "synchronized">{System.out.println("SINCRONIZAR");} //34
}
TOKEN:
{
<HILO: "Thread">{System.out.println("HILO");} //35
}
TOKEN:
{
<NUMEROSINSIGNO: "unsigned">{System.out.println("NUMEROSINSIGNO");} //36
}
TOKEN:
{
<NUEVAINSTANCIA: "new">{System.out.println("NUEVAINSTANCIA");} //37
}
TOKEN:
{
<ARREGLO: "Array">{System.out.println("ARREGLO");} //38
}
TOKEN:
{
<IMPLEMENTAR: "implements">{System.out.println("IMPLEMENTAR");} //39
}
TOKEN:
{
<SALIR: "exit" | "quit">{System.out.println("SALIR -> "+ image);} //40
}
TOKEN:
{
<CERRAR: "close">{System.out.println("CERRAR");} //41
}
TOKEN:
{
<EMPEZAR: "begin">{System.out.println("EMPEZAR");} //42
}
TOKEN:
{
<TERMINAR: "end">{System.out.println("TERMINAR");} //43
}
TOKEN:
{
<PROCEDIMIENTO: "procedure">{System.out.println("PROCEDIMIENTO");} //44
}
TOKEN:
{
<EMPEZARMODULO: "unit">{System.out.println("EMPEZARMODULO");} //45
}
TOKEN:
{
<UNIDADESAUTILIZAR: "uses">{System.out.println("UNIDADESAUTILIZAR");} //46
}
TOKEN: /*Operadores*/
{
<OPERADORLOGICO: "and" | "not" | "or" | "xor" | "&&" | "||" | "!" | "^">{System.out.println("OPERADORLOGICO -> "+ image);} //47
|<OPERADORMATEMATICO: "/" | "*"| "-" | "+" | "%">{System.out.println("OPERADORMATEMATICO -> "+ image);} //48
}
TOKEN:
{
<ASIGNACION: "=">{System.out.println("ASIGNACION");} //49
}
TOKEN:
{
<TIEMPO: "date" | "time">{System.out.println("TIEMPO -> "+ image);} //50
}
TOKEN: /*SQL*/
{
<CREAR: "create">{System.out.println("CREAR");} //51
|<USAR: "use">{System.out.println("USAR");} //52
|<TABLA: "table">{System.out.println("TABLA");} //53
|<EJECUTAR: "exec">{System.out.println("EJECUTAR");} //54
|<LLAVE: "key">{System.out.println("LLAVE");} //55
|<INSERTAR: "insert">{System.out.println("INSERTAR");} //56
|<VALORES: "values">{System.out.println("VALORES");} //57
|<CONTAR: "count">{System.out.println("CONTAR");} //58
|<FORANEO: "foreign">{System.out.println("FORANEO");} //59
|<VISTA: "view">{System.out.println("VISTA");} //60
|<SELECCIONAR: "select">{System.out.println("SELECCIONAR");} //61
|<UNIR: "join">{System.out.println("UNIR");} //62
}
TOKEN:
{
<TIPO: "type">{System.out.println("TIPO");} //63
}
TOKEN: /*Maximos y minimos*/
{
<MAXIMO: "max">{System.out.println("MAXIMO");} //64
|<MAXIMOLISTA: "maximum">{System.out.println("MAXIMOLISTA");} //66
|<MINIMO: "min">{System.out.println("MINIMO");} //67
|<MINIMOLISTA: "minimum">{System.out.println("MINIMOLISTA");} //68
}
TOKEN:
{
<PROMEDIO: "avg">{System.out.println("PROMEDIO");} //69
}
TOKEN:
{
<QUITARESPACIOS: "ltrim">{System.out.println("QUITARESPACIOS");} //70
}
TOKEN:
{
<REPLICAR: "replicate">{System.out.println("REPLICAR");} //71
}
TOKEN:
{
<VOLTEAR: "reverse">{System.out.println("VOLTEAR");} //72
}
TOKEN: /*Especiales*/
{
<FORMATOENTRADA: "%s" | "%d" | "%fi">{System.out.println("FORMATOENTRADA -> "+ image);} //74
|<COMENTARIO: "//">{System.out.println("COMENTARIO");} //75
}
TOKEN:
{
  <ACCESOCLASE: "base" | "super"> {System.out.println("ACCESOCLASE -> "+ image);}
}
TOKEN:
{
  <AFIRMACONDICION: "assert"> {System.out.println("AFIRMACONDICION");}
}
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}
void Iniciar() :
{}
{
  (Instruccion())+<EOF>
}
void Instruccion() :
{}
{
(
<BOOLEANO>|
<CICLO>|
<CONDICION>|
<CASO>|
<CONSTANTE>|
<CLASE>| 
<LIMPIARCONSOLA>|
<DETENER>|
<ESTATICO>|
<FLUJOCONTROL>|
<MANEJOEXEPCIONES>|
<OPTIMIZACION>|
<PORDEFECTO>|
<SINO>|
<REGRESAR>|
<TIPOACCESO>|
<TIPODATO>|
<TIPOMETODO>|
<ENUMERAR>|
<SIZE>|
<ESTRUCTURA>|
<UNION>|
<DESDE>|
<CONTINUAR>|
<IRA>|
<PAQUETE>|
<OTROLENGUAJE>|
<EXPORTAR>|
<COMPROBARVALOREN>|
<ES>|
<BORRAR>|
<NOOPERACION>|
<DEFINIR>|
<INCLUIR>|
<SINCRONIZAR>|
<HILO>|
<NUMEROSINSIGNO>|
<NUEVAINSTANCIA>|
<ARREGLO>|
<IMPLEMENTAR>|
<SALIR>|
<CERRAR>|
<EMPEZAR>|
<TERMINAR>|
<PROCEDIMIENTO>|
<EMPEZARMODULO>|
<UNIDADESAUTILIZAR>|
<OPERADORLOGICO>|
<OPERADORMATEMATICO>|
<ASIGNACION>|
<TIEMPO>|
<CREAR>|
<USAR>|
<TABLA>|
<EJECUTAR>|
<LLAVE>|
<INSERTAR>|
<VALORES>|
<CONTAR>|
<FORANEO>|
<VISTA>|
<TIPO>|
<MAXIMO>|
<MAXIMOLISTA>|
<MINIMO>|
<MINIMOLISTA>|
<PROMEDIO>|
<SELECCIONAR>|
<UNIR>|
<QUITARESPACIOS>|
<REPLICAR>|
<VOLTEAR>|
<FORMATOENTRADA>|
<COMENTARIO>|
<ACCESOCLASE>|
<AFIRMACONDICION>
)
}
